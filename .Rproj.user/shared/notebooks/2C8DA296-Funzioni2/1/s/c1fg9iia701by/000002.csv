"0",""
"0","t.test.between.groups <- function(groupname, varname, data, "
"0","                                  type=""pairs"" # pairs | base | progressive"
"0","                                  ) {"
"0","  "
"0","  if (!is.null(data)) {"
"0","    group <- data[[groupname]]"
"0","    y <- data[[varname]]"
"0","  } else {"
"0","    print(""ERROR, data Ã¨ obbligatorio"")"
"0","  }"
"0","  "
"0","  # estraggo i lv. "
"0","  lvls <- levels(factor(data[[groupname]]))"
"0","    "
"0","  res <- c()"
"0","  "
"0","  if (type==""pairs"") {"
"0","    "
"0","    # versione 1: confronti tra tutte le coppie di gruppi"
"0","    i<-1"
"0","    while(i<=length(lvls)-1) {"
"0","      "
"0","      j<-i+1"
"0","      while(j<=length(lvls)){"
"0","        res[[paste(""<"", lvls[i], "","", lvls[j], "">"", sep="""")]] <- "
"0","          t.test(data[data[[groupname]]==lvls[i], varname], data[data[[groupname]]==lvls[j], varname])"
"0","        j<-j+1"
"0","      }"
"0","      "
"0","      i<-i+1"
"0","    }"
"0","    "
"0","    return(res)"
"0","    "
"0","  } else if (type==""base"") {"
"0","    "
"0","    # versione 2: confronti progressivi tra tutti i gruppi e quello di base"
"0","    i<-2"
"0","    while(i<=length(lvls)) {"
"0","      "
"0","      res[[paste(""<"", lvls[1], "","", lvls[i], "">"", sep="""")]] <- "
"0","          t.test(data[data[[groupname]]==lvls[1], varname], data[data[[groupname]]==lvls[i], varname])"
"0","      "
"0","      i<-i+1"
"0","    }"
"0","    "
"0","    return(res)"
"0","  "
"0","  } else if (type==""progressive"") {"
"0","    # versione 3: confronti tra ogni gruppo e quello successivo "
"0","    i<-1"
"0","    while(i<=length(lvls)-1) {"
"0","      "
"0","      res[[paste(""<"", lvls[i], "","", lvls[i+1], "">"", sep="""")]] <- "
"0","          t.test(data[data[[groupname]]==lvls[i], varname], data[data[[groupname]]==lvls[i+1], varname])"
"0","      "
"0","      i<-i+1"
"0","    }"
"0","    "
"0","    return(res)"
"0","  }"
"0","  "
"0","  return(""ERROR: nessun opzione type selezionata. Scegli tra pairs, base e progressive."")"
"0","}"
"0",""
"0",""
